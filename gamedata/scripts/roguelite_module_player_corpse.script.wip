--[[
	Jabbers
	27MAR2023
	Jabbers Ironman Roguelite - Player Corpse Module
--]]

local config = {
    -- Drop the players inventory on death, will show as a backpack or player created stash on the next ironman run
    drop_player_inventory_on_death = true,
}

local m_data = {
    corpse_version = 2,
    corpse = nil,
    is_looted = false,
    item_uses_data = {}
}

local function get_corpse_data() 
    local sim = alife()
    local actor = db.actor    
	local se_actor = alife():actor()
    local level_name = level.name()
	
    roguelite_manager.debug_write("Gathering corpse data.")

    local pos = actor:position()
    local corpse_data = { 
        position = {
            x = pos.x,
            y = pos.y,
            z = pos.z
        }, 
        m_level_vertex_id = actor:level_vertex_id(),
        m_game_vertex_id = actor:game_vertex_id(),
        character_name = actor:character_name(),
        profile_name = se_actor:profile_name(),
        visual = actor:get_visual_name(),
        character_icon = actor:character_icon(),
        level_name = level_name,
        items = {}
    }

    roguelite_manager.debug_write("Iterating items.")

    for i=1,65534 do 
		local se_obj = sim:object(i)
		if (se_obj and se_obj.parent_id == AC_ID) then
			local sec = se_obj:section_name()
			if not ini_sys:r_bool_ex(sec, "quest_item", false) then
                roguelite_manager.debug_write("Found corpse item " .. se_obj:name() .. " " .. se_obj.id ..".")

                local section = se_obj:section_name()
                local corpse_item_data = {
                    id = se_obj.id,
                    name = se_obj:name(),
                    clsid = get_clsid(se_obj),
                    section = section
                }

                if IsWeapon(se_obj) then
                    roguelite_manager.debug_write("Gathering weapon data for " .. se_obj:name() .. " " ..se_obj.id .. ".")
                    local data = utils_stpk.get_weapon_data(se_obj)

                    corpse_item_data.ammo_current = data.ammo_current
                    corpse_item_data.ammo_elapsed = data.ammo_elapsed
                    corpse_item_data.weapon_state = data.weapon_state
                    corpse_item_data.addon_flags = data.addon_flags
                    corpse_item_data.ammo_type = data.ammo_type

                    corpse_item_data.condition = data.condition
                    corpse_item_data.upgrades = data.upgrades

                    corpse_item_data.visual_name = data.visual_name
                    corpse_item_data.visual_flags = data.visual_flags

                    corpse_item_data.object_flags = data.object_flags
                    corpse_item_data.custom_data = data.custom_data
                elseif IsAmmo(se_obj) then
                    roguelite_manager.debug_write("Gathering ammo data for " .. se_obj:name() .. " " ..se_obj.id .. ".")
                    local data = utils_stpk.get_ammo_data(se_obj)

                    corpse_item_data.condition = data.condition
                    corpse_item_data.upgrades = data.upgrades

                    corpse_item_data.visual_name = data.visual_name
                    corpse_item_data.visual_flags = data.visual_flags

                    corpse_item_data.object_flags = data.object_flags
                    corpse_item_data.custom_data = data.custom_data

                    corpse_item_data.ammo_left = data.ammo_left
                else
                    roguelite_manager.debug_write("Gathering item data " .. se_obj:name() .. " " ..se_obj.id .. ".")
                    local data = utils_stpk.get_item_data(se_obj)

                    corpse_item_data.condition = data.condition
                    corpse_item_data.upgrades = data.upgrades

                    corpse_item_data.visual_name = data.visual_name
                    corpse_item_data.visual_flags = data.visual_flags

                    corpse_item_data.object_flags = data.object_flags
                    corpse_item_data.custom_data = data.custom_data

                    if IsItem("multiuse", section) and m_data.item_uses_data[se_obj.id] then
                        corpse_item_data.uses = m_data.item_uses_data[se_obj.id]
                    end
                end

                corpse_data.items[se_obj.id] = corpse_item_data
			end
		end
	end

    return corpse_data
end

local function spawn_corpse(data) 
    roguelite_manager.debug_write("Spawning player corpse from prior playthrough.")

	local pos = vector():set(data.position.x, data.position.y, data.position.z)
    local se_mimic = alife_create("stalker_azazel", pos, data.m_level_vertex_id, data.m_game_vertex_id)

	if (se_mimic) then 
		se_mimic:set_character_name(data.character_name)
		se_mimic:set_profile_name(data.profile_name)
		se_mimic:kill()
        
        data.id = se_mimic.id;
		
		local m_data = alife_storage_manager.get_se_obj_state(se_mimic, true)

		if (m_data) then
			m_data.icon_name = data.character_icon
            m_data.visual = data.get_visual_name
		end        
	end
end

--------------------------------
-- Game Callbacks
--------------------------------
local function save_state(data)
    if not IsHardcoreMode() then
        return
    end

    roguelite_manager.debug_write("Saving stash data.")

    if not data.roguelite_manager then
        data.roguelite_manager = {}
    end

    data.roguelite_manager.corpse_version = m_data.corpse_version
    data.roguelite_manager.corpse = m_data.corpse
    data.roguelite_manager.is_looted = m_data.is_looted
end

local function load_state(data)
    if not IsHardcoreMode() then
        return
    end

    if not data.roguelite_manager then
        return
    end

    m_data.corpse_version = data.roguelite_manager.corpse_version
    m_data.corpse = data.roguelite_manager.corpse
    m_data.is_looted = data.roguelite_manager.is_looted
    
    data.roguelite_manager.corpse_version = nil
    data.roguelite_manager.corpse = nil
    data.roguelite_manager.is_looted = nil
end

local function restore_prior_state_corpse_v1(data)
    m_data.corpse = data.corpse
end

function roguelite_load_state(save_data)
    if config.drop_player_inventory_on_death then
        if save_data.corpse_version and save_data.corpse_version >= 1 then
            restore_prior_state_corpse_v1(save_data)
        end
    end
    
    if m_data.corpse and not m_data.is_looted then
        spawn_corpse(m_data.corpse)
    end
end

function roguelite_save_state(save_data)
    save_data.corpse_version = m_data.corpse_version
    save_data.corpse = get_corpse_data()
end

function append_mcm_options(gr)
    roguelite_manager.debug_write("Appending corpse module mcm options.")
    table.insert(gr, { id = "line" , type = "line" })
    table.insert(gr, {
        id = "drop_player_inventory_on_death_enabled",
        type = "check",
        val = 1,
        def = true
    })
    -- table.insert(gr, {
    --     id = "drop_player_loss_chance_per_item",
    --     type = "track",
    --     val = 2,
    --     min = 0,
    --     max = 1,
    --     step = 0.01,
    --     def = 0.50
    -- })
end

function on_option_change()
    local get_config = roguelite_manager_mcm.get_config  
    
    config.drop_player_inventory_on_death = get_config("drop_player_inventory_on_death_enabled") or true
    -- config.drop_player_inventory_condition_loss_percent = get_config("drop_player_inventory_condition_loss_percent") or 0.01
    -- config.drop_player_loss_chance_per_item = get_config("drop_player_loss_chance_per_item") or 0.50

    roguelite_manager.debug_write("drop_player_inventory_on_death = "..tostring(config.drop_player_inventory_on_death))  
    roguelite_manager.debug_write("drop_player_inventory_condition_loss_percent = "..tostring(config.drop_player_inventory_condition_loss_percent))
    roguelite_manager.debug_write("drop_player_loss_chance_per_item = "..tostring(config.drop_player_loss_chance_per_item))
end

function on_game_load()
    if ui_mcm then
	    on_option_change()
    end
end

local function on_level_changing() 
    roguelite_manager.debug_write("Level change")
   
    if m_data.corpse and not m_data.is_looted then
        roguelite_manager.debug_write("Checking corpse release status.")
        local rbm = release_body_manager.get_release_body_manager()
        
        if not rbm.release_objects_table[m_data.corpse.id]  then
            roguelite_manager.debug_write("Adding corpse to body manager for release.")
            rbm.release_objects_table[m_data.corpse.id] = nil
        end
    end
    
end

function on_game_start()
	RegisterScriptCallback("on_game_load", on_game_load)
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
    RegisterScriptCallback("on_level_changing", on_level_changing)

    roguelite_manager.debug_write("Corpse module callbacks registered")
end

local old_keep_item = death_manager.keep_item
local old_create_release_item = death_manager.create_release_item

function death_manager.create_release_item(npc)
    roguelite_manager.debug_write("Create realease item hook checking npc.id(" .. tostring(npc:id()) .. ") == corpse.id("..tostring(m_data.corpse.id)..").")
    if not m_data.is_looted and m_data.corpse and m_data.corpse.id == npc:id() then        
        m_data.is_looted = true
                
        for _, item_data in pairs(m_data.corpse.items) do
            local section = item_data.section
            roguelite_manager.restore_item(section, npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), item_data, npc:id(), false)
        end
    else
        old_create_release_item(npc)
    end
    
end

function death_manager.keep_item(npc, item) 
    if not (item) then
        return
    end 

    if m_data.corpse and m_data.corpse.id == npc:id() then        
        return
    end

    old_keep_item(npc, item)
end